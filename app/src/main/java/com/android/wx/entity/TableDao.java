//package com.android.wx.entity;
//
//import android.database.Cursor;
//import android.database.sqlite.SQLiteStatement;
//
//import org.greenrobot.greendao.AbstractDao;
//import org.greenrobot.greendao.Property;
//import org.greenrobot.greendao.internal.DaoConfig;
//import org.greenrobot.greendao.database.Database;
//import org.greenrobot.greendao.database.DatabaseStatement;
//
//import com.android.wx.db.DaoSession;
//import com.android.wx.model.Table;
//
//// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
///**
// * DAO for table "TABLE".
//*/
//public class TableDao extends AbstractDao<Table, Long> {
//
//    public static final String TABLENAME = "TABLE";
//
//    /**
//     * Properties of entity Table.<br/>
//     * Can be used for QueryBuilder and for referencing column names.
//     */
//    public static class Properties {
//        public final static Property Id = new Property(0, long.class, "id", true, "_id");
//        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
//        public final static Property Number = new Property(2, String.class, "number", false, "NUMBER");
//        public final static Property PersionNo = new Property(3, String.class, "persionNo", false, "PERSION_NO");
//        public final static Property Amount1 = new Property(4, double.class, "amount1", false, "AMOUNT1");
//        public final static Property Amount2 = new Property(5, double.class, "amount2", false, "AMOUNT2");
//        public final static Property Amount3 = new Property(6, double.class, "amount3", false, "AMOUNT3");
//        public final static Property Statue = new Property(7, int.class, "statue", false, "STATUE");
//    }
//
//
//    public TableDao(DaoConfig config) {
//        super(config);
//    }
//
//    public TableDao(DaoConfig config, DaoSession daoSession) {
//        super(config, daoSession);
//    }
//
//    /** Creates the underlying database table. */
//    public static void createTable(Database db, boolean ifNotExists) {
//        String constraint = ifNotExists? "IF NOT EXISTS ": "";
//        db.execSQL("CREATE TABLE " + constraint + "\"TABLE\" (" + //
//                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
//                "\"NAME\" TEXT," + // 1: name
//                "\"NUMBER\" TEXT," + // 2: number
//                "\"PERSION_NO\" TEXT," + // 3: persionNo
//                "\"AMOUNT1\" REAL NOT NULL ," + // 4: amount1
//                "\"AMOUNT2\" REAL NOT NULL ," + // 5: amount2
//                "\"AMOUNT3\" REAL NOT NULL ," + // 6: amount3
//                "\"STATUE\" INTEGER NOT NULL );"); // 7: statue
//    }
//
//    /** Drops the underlying database table. */
//    public static void dropTable(Database db, boolean ifExists) {
//        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE\"";
//        db.execSQL(sql);
//    }
//
//    @Override
//    protected final void bindValues(DatabaseStatement stmt, Table entity) {
//        stmt.clearBindings();
//        stmt.bindLong(1, entity.getId());
//
//        String name = entity.getName();
//        if (name != null) {
//            stmt.bindString(2, name);
//        }
//
//        String number = entity.getNumber();
//        if (number != null) {
//            stmt.bindString(3, number);
//        }
//
//        String persionNo = entity.getPersionNo();
//        if (persionNo != null) {
//            stmt.bindString(4, persionNo);
//        }
//        stmt.bindDouble(5, entity.getAmount1());
//        stmt.bindDouble(6, entity.getAmount2());
//        stmt.bindDouble(7, entity.getAmount3());
//        stmt.bindLong(8, entity.getStatue());
//    }
//
//    @Override
//    protected final void bindValues(SQLiteStatement stmt, Table entity) {
//        stmt.clearBindings();
//        stmt.bindLong(1, entity.getId());
//
//        String name = entity.getName();
//        if (name != null) {
//            stmt.bindString(2, name);
//        }
//
//        String number = entity.getNumber();
//        if (number != null) {
//            stmt.bindString(3, number);
//        }
//
//        String persionNo = entity.getPersionNo();
//        if (persionNo != null) {
//            stmt.bindString(4, persionNo);
//        }
//        stmt.bindDouble(5, entity.getAmount1());
//        stmt.bindDouble(6, entity.getAmount2());
//        stmt.bindDouble(7, entity.getAmount3());
//        stmt.bindLong(8, entity.getStatue());
//    }
//
//    /*@Override
//    public Long readKey(Cursor cursor, int offset) {
//        return cursor.getLong(offset + 0);
//    }
//
//    @Override
//    public Table readEntity(Cursor cursor, int offset) {
//        Table entity = new Table( //
//            cursor.getLong(offset + 0), // id
//            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
//            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // number
//            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // persionNo
//            cursor.getDouble(offset + 4), // amount1
//            cursor.getDouble(offset + 5), // amount2
//            cursor.getDouble(offset + 6), // amount3
//            cursor.getInt(offset + 7) // statue
//        );
//        return entity;
//    }*/
//
//    @Override
//    public void readEntity(Cursor cursor, Table entity, int offset) {
//        entity.setId(cursor.getLong(offset + 0));
//        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
//        entity.setNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
//        entity.setPersionNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
//        entity.setAmount1(cursor.getDouble(offset + 4));
//        entity.setAmount2(cursor.getDouble(offset + 5));
//        entity.setAmount3(cursor.getDouble(offset + 6));
//        entity.setStatue(cursor.getInt(offset + 7));
//     }
//
//    @Override
//    protected final Long updateKeyAfterInsert(Table entity, long rowId) {
//        entity.setId(rowId);
//        return rowId;
//    }
//
//    @Override
//    public Long getKey(Table entity) {
//        if(entity != null) {
//            return entity.getId();
//        } else {
//            return null;
//        }
//    }
//
//    @Override
//    public boolean hasKey(Table entity) {
//        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
//    }
//
//    @Override
//    protected final boolean isEntityUpdateable() {
//        return true;
//    }
//
//}
